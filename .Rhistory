mypets=dbConnect(MySQL(),user="root",
host="localhost8889/DatabaseGrace")
source("http://bioconductor.org/bioLite.R")
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created=h5createFile("example.h5")
created
h5createGroup("example.h5","foo")
h5createGroup("example.h5","baa")
h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B=array(seq(0.1,2.0,by=.1),dim(5,2,2))
)
B=array(seq(0.1,2.0,by=.1),dim(c(5,2,2)))
B=array(seq(0.1,2.0,by=.1),dimc(5,2,2))
B=array(seq(0.1,2.0,by=.1),dim=c(5,2,2))
attr(B,"scale")="liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df=data.frame(1L:5L,seq(0,1), length.out=5)
df=data.frame(1L:5L,seq(0,1,length.out=5)
df=data.frame(1L:5L,seq(0,1,length.out=5))
df=data.frame(1L:5L,seq(0,1,length.out=5))
df=data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s".stringsAsFactors=FALSE)
df=data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA=h5read("example.h5","foo/A")
readB=h5read("example.h5","foo/foobaa/B")
readdf=h5read("example.h5","df")
A==readA
readdf==df
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
A==readA
readA=h5read("example.h5","foo/A")
A==readA
mypets=dbConnect(MySQL(),user="root",
host="localhost/DatabaseGrace")
mypets=dbConnect(MySQL(),user="root",
host="localhost:8889/DatabaseGrace")
mypets=dbConnect(MySQL(),user="root",
host="localhost:DatabaseGrace")
mypets=dbConnect(MySQL(),user="root",
host="localhost8889")
mypets=dbConnect(MySQL(),user="root",
host="localhost:8889")
mypets=dbConnect(MySQL(),user="root",
host="localhost/DatabaseGrace")
mypets=dbConnect(MySQL(),user="root",
host="localhost:DatabaseGrace")
mypets=dbConnect(MySQL(),user="root",
host="localhost")
mypets=dbConnect(MySQL(),user="root",
host="localhost:8889")
mypets=dbConnect(MySQL(),user="root",
host="localhost/8889")
mypets=dbConnect(MySQL(),user="root",
host="localhost8889")
mypets=dbConnect(MySQL(),user="root",
host="localhost:3306")
mypets=dbConnect(MySQL(),user="root",
host="localhost3306")
mypets=dbConnect(MySQL(),user="root",
host="localhost/3306")
mypets=dbConnect(MySQL(),user="root",
host="localhost")
install.packages("RMySQL")
install.packages("dbConnect")
library(dbConnect)
mypets=dbConnect(MySQL(),user="root",
host="localhost")
mypets=dbConnect(MySQL(),user="root",
host="databasegrace")
mypets=dbConnect(MySQL(),user="root",
host="localhost",unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace"
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
getwd()
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="gorgas2006"
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="gorgas2006",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="gorgas",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="jurgen",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="root",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
mypets
allTables=dbListTables(DatabaseGrace)
allTables=dbListTables("DatabaseGrace")
result=dbGetQuery(localhost,"show databases;");dbDisconnect(localhost);
result=dbGetQuery(root,"show databases;");dbDisconnect(root);
result=dbGetQuery(mypets,"show databases;");dbDisconnect(mypets);
dbGrace=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="root",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
result=dbGetQuery(dbGrace,"show databases;");dbDisconnect(dbGrace);
allTables=dbListTables(dbGrace)
result
dbListFields(DatabaseGrace,"mypets")
dbGrace=dbConnect(MySQL(),user="root",
host="localhost/DatabaseGrace",
password="root",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
dbGrace=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="root",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
result=dbGetQuery(dbGrace,"show databases;");dbDisconnect(dbGrace);
dbGrace=dbConnect(MySQL(),user="root",
host="localhost",
dbname="DatabaseGrace",
password="root",
unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
result=dbGetQuery(dbGrace,"show databases;");dbDisconnect(dbGrace);
result
allTables=dbListTables(dbGrace)
56000/9*12
56000/9*12*1.1
myapp=oath_app("twitter",
#APIkey=Consumerkey
key="RW5UgOBGBjIlnBxV5kYTuuZSu",
#Consumersecret=APIsecret
secret="yogFvHsEdfQ5tqcz7jBQGY7TcTlQfNEPcc1z3AzpKb4Rtc9mGf",
)
library(httr)
myapp=oath_app("twitter",
#APIkey=Consumerkey
key="RW5UgOBGBjIlnBxV5kYTuuZSu",
#Consumersecret=APIsecret
secret="yogFvHsEdfQ5tqcz7jBQGY7TcTlQfNEPcc1z3AzpKb4Rtc9mGf",
)
myapp=oauth_app("twitter",
#APIkey=Consumerkey
key="RW5UgOBGBjIlnBxV5kYTuuZSu",
#Consumersecret=APIsecret
secret="yogFvHsEdfQ5tqcz7jBQGY7TcTlQfNEPcc1z3AzpKb4Rtc9mGf",
)
myapp=oauth_app("twitter",
#APIkey=Consumerkey
key="RW5UgOBGBjIlnBxV5kYTuuZSu",
#Consumersecret=APIsecret
secret="yogFvHsEdfQ5tqcz7jBQGY7TcTlQfNEPcc1z3AzpKb4Rtc9mGf"
)
sig=sign_pauth1.0(myapp,
token="1687360747-gSWLXW1nEIpDr6HLMMpcu6ZbtLsAzSH2Fo8J11x",
token_secret="Rm2wS9JEkHtwCMZVudcjcX04pAI0QCl0bJOzgjVi3zrwo"
)
sig=sign_oauth1.0(myapp,
token="1687360747-gSWLXW1nEIpDr6HLMMpcu6ZbtLsAzSH2Fo8J11x",
token_secret="Rm2wS9JEkHtwCMZVudcjcX04pAI0QCl0bJOzgjVi3zrwo"
)
homeTL=GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
head(homeTL)
json1=content(homeTL)#recognizes that this is json data
library(jsonlite)
install.pachages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
json1=content(homeTL)#recognizes that this is json data
json2=jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
myapp=oauth_app("Github",
key="eafb99771bbd27696303",
secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a"
)
sig=sign_oauth1.0(myapp,
token="eafb99771bbd27696303",
token_secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a"
)
homeTL=GET("https://api.github.com/users/jtleek/repos",sig)
head(homeTL)
homeTL$date
json1=content(homeTL)#recognizes that this is json data
json2=jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
head(json2)
json2
stop_for_status(homeTL)
homeTL=GET("https://api.github.com/users/jtleek/repos",sig)
stop_for_status(homeTL)
content(homeTL)
github_token <- oauth2.0_token(
oauth_endpoints("Github"),
myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "eafb99771bbd27696303")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "eafb99771bbd27696303")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
\library(httpuv)
library(httpuv)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "eafb99771bbd27696303")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth_endpoints("github")
myapp <- oauth_app("github", "eafb99771bbd27696303")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "eafb99771bbd27696303",secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <-  sign_oauth1.0("github", "eafb99771bbd27696303"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "eafb99771bbd27696303"
)
myapp <-  sign_oauth1.0("github", "eafb99771bbd27696303"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "eafb99771bbd27696303",
secret="NULL"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "eafb99771bbd27696303",
secret=NULL
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "eafb99771bbd27696303"
)
myapp <-  sign_oauth1.0("github", "eafb99771bbd27696303"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
stop_for_status(req)
myapp=oauth_app("Github",
key="eafb99771bbd27696303",
secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a"
)
sig=sign_oauth1.0(myapp,
token="eafb99771bbd27696303",
token_secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a"
)
library(httr)
install.packages("httpuv")
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "eafb99771bbd27696303",
secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a"
)
myapp <-  sign_oauth1.0("github", "eafb99771bbd27696303"
)
myapp <- oauth_app("github", "eafb99771bbd27696303",
secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "eafb99771bbd27696303",
secret="811e8caa4b1d3e21fbb69a38eef7dbe94b95657a"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
features=read.table("UCIHAR_Dataset/features.txt")
f=features[,2]
extract=grep("mean|std",f)
setwd("~/Dropbox/Coursera_DataAnalysisR/3GettingCleaningData/CourseWork/ActivityDataWearableTechnology")
features=read.table("UCIHAR_Dataset/features.txt")
f=features[,2]
extract=grep("mean|std",f)
subjecttest=read.table("UCIHAR_Dataset/test/subject_test.txt")
colnames(subjecttest)="id"
activitytest=read.table("UCIHAR_Dataset/test/Y_test.txt")
colnames(activitytest)="Activity_Labels"
testdata=read.table("UCIHAR_Dataset/test/X_test.txt")
colnames(testdata)=f
test=testdata[,extract]
subjecttrain=read.table("UCIHAR_Dataset/train/subject_train.txt")
colnames(subjecttrain)="id"
activitytrain=read.table("UCIHAR_Dataset/train/Y_train.txt")
colnames(activitytrain)="Activity_Labels"
traindata=read.table("UCIHAR_Dataset/train/X_train.txt")
colnames(traindata)=f
train=traindata[,extract]
data1=subjecttest
data1[,2]=activitytest
data1[,3:81]=test
data2=subjecttrain
data2[,2]=activitytrain
data2[,3:81]=train
library(plyr)
data=arrange(merge(data1,data2,all=T),id)
actlab=read.table("UCIHAR_Dataset/activity_labels.txt")
al=actlab[,2]
for (i in 1:6) {
data$Activity_Labels[data$Activiy_Labels==i]=al[i]
}
data[1:3,1:2]
data$Activity_Labels[data$Activiy_Labels==1]=al[1]
data[1:3,1:2]
data$Activity_Labels[data$Activiy_Labels==1]=hmm
data$Activity_Labels[data$Activiy_Labels==1]="hmm"
data[1:3,1:2]
class(data$Activity_Labels)
as.numeric(data$Activity_Labels)
class(data$Activity_Labels)
data$Activity_Labels=as.numeric(data$Activity_Labels)
class(data$Activity_Labels)
for (i in 1:6) {
data$Activity_Labels[data$Activiy_Labels==i]=al[i]
}
data[1:3,1:2]
class(data$Activity_Labels)
data$Activity_Labels[data$Activiy_Labels==1]="hmm"
data[1:3,1:2]
data$Activity_Labels[data$Activity_Labels==i]=al[i]
for (i in 1:6) {
data$Activity_Labels[data$Activity_Labels==i]=al[i]
}
data[1:3,1:2]
actlab=read.table("UCIHAR_Dataset/activity_labels.txt")
al=actlab[,2]
class(data$Activity_Labels)
data$Activity_Labels=as.numeric(data$Activity_Labels)
class(data$Activity_Labels)
data$Activity_Labels[data$Activity_Labels==1]="hmm"
data[1:3,1:2]
head(data$Activity_Labels)
data1=subjecttest
data1[,2]=activitytest
data1[,3:81]=test
data2=subjecttrain
data2[,2]=activitytrain
data2[,3:81]=train
library(plyr)
data=arrange(merge(data1,data2,all=T),id)
data[1:3,1:2]
data$Activity_Labels=as.numeric(data$Activity_Labels)
class(data$Activity_Labels)
head(data$Activity_Labels)
actlab=read.table("UCIHAR_Dataset/activity_labels.txt")
al=actlab[,2]
data$Activity_Labels[data$Activity_Labels==1]="hmm"
data[1:3,1:2]
#Merge data
data1=subjecttest
#dim(test) #=2947x561, used to figure out howm any variables
data1[,2]=activitytest
data1[,3:81]=test
data2=subjecttrain
#dim(train) #=7352x561, used to figure out howm any variables
data2[,2]=activitytrain
data2[,3:81]=train
#When we merge, we don't want NA's all willy nilly
#The test and train data are from distinct subjects
#so essentially we want them concatonated
library(plyr)
data=arrange(merge(data1,data2,all=T),id)
#dim(data)#=81
#data[1:3,1:2]
#Activity Labels key
actlab=read.table("UCIHAR_Dataset/activity_labels.txt")
al=actlab[,2]
class(data$Activity_Labels)
head(data$Activity_Labels)
for (i in 1:6) {
data$Activity_Labels[data$Activity_Labels==i]=al[i]
}
data[1:3,1:2]
al
class(data$Activity_Labels)
#Merge data
data1=subjecttest
#dim(test) #=2947x561, used to figure out howm any variables
data1[,2]=activitytest
data1[,3:81]=test
data2=subjecttrain
#dim(train) #=7352x561, used to figure out howm any variables
data2[,2]=activitytrain
data2[,3:81]=train
#When we merge, we don't want NA's all willy nilly
#The test and train data are from distinct subjects
#so essentially we want them concatonated
library(plyr)
data=arrange(merge(data1,data2,all=T),id)
#dim(data)#=81
#data[1:3,1:2]
#Activity Labels key
actlab=read.table("UCIHAR_Dataset/activity_labels.txt")
al=actlab[,2]
class(data$Activity_Labels)
head(data$Activity_Labels)
data$Activity_Labels[data$Activity_Labels==1]=al[1]
data[1:3,1:2]
al[1]
al=as.character(actlab[,2])
al
#Merge data
data1=subjecttest
#dim(test) #=2947x561, used to figure out howm any variables
data1[,2]=activitytest
data1[,3:81]=test
data2=subjecttrain
#dim(train) #=7352x561, used to figure out howm any variables
data2[,2]=activitytrain
data2[,3:81]=train
#When we merge, we don't want NA's all willy nilly
#The test and train data are from distinct subjects
#so essentially we want them concatonated
library(plyr)
data=arrange(merge(data1,data2,all=T),id)
#dim(data)#=81
#data[1:3,1:2]
#Activity Labels key
actlab=read.table("UCIHAR_Dataset/activity_labels.txt")
al=as.character(actlab[,2])
al
for (i in 1:6) {
data$Activity_Labels[data$Activity_Labels==i]=al[i]
}
write.table(data,file="CleanActivity.txt",row.name=F)
data[1:3,1:2]
#features are the variable names for test and train
features=read.table("UCIHAR_Dataset/features.txt")
f=features[,2]
#TrueFalse Vector finding all labels with mean
#and SD (why do they use std?)
extract=grep("mean|std",f)
#length(extract)#=79
#30 possible test sujects
#subject associated with each datapoint
subjecttest=read.table("UCIHAR_Dataset/test/subject_test.txt")
colnames(subjecttest)="id"
#activity
activitytest=read.table("UCIHAR_Dataset/test/Y_test.txt")
colnames(activitytest)="Activity_Labels"
#each motion data vector taken
testdata=read.table("UCIHAR_Dataset/test/X_test.txt")
colnames(testdata)=f
test=testdata[,extract]
#dim(test)#=79
#30 possible training subjects
#subject associated with each datapoint
subjecttrain=read.table("UCIHAR_Dataset/train/subject_train.txt")
colnames(subjecttrain)="id"
#activity
activitytrain=read.table("UCIHAR_Dataset/train/Y_train.txt")
colnames(activitytrain)="Activity_Labels"
#each motion data vector taken
traindata=read.table("UCIHAR_Dataset/train/X_train.txt")
colnames(traindata)=f
train=traindata[,extract]
#dim(train)#=79
#Merge data
data1=subjecttest
#dim(test) #=2947x561, used to figure out howm any variables
data1[,2]=activitytest
data1[,3:81]=test
data2=subjecttrain
#dim(train) #=7352x561, used to figure out howm any variables
data2[,2]=activitytrain
data2[,3:81]=train
#When we merge, we don't want NA's all willy nilly
#The test and train data are from distinct subjects
#so essentially we want them concatonated
library(plyr)
data=arrange(merge(data1,data2,all=T),id)
#dim(data)#=81
#data[1:3,1:2]#Still need to replace activity labels
#Activity Labels key
actlab=read.table("UCIHAR_Dataset/activity_labels.txt")
al=as.character(actlab[,2])
for (i in 1:6) {
data$Activity_Labels[data$Activity_Labels==i]=al[i]
}
#data[1:3,1:2]
write.table(data,file="CleanActivity.txt",row.name=F)
data[1:3,1:2]
setwd("~/Dropbox/Coursera_DataAnalysisR/3GettingCleaningData/CourseWork/ActivityDataWearableTechnology")
